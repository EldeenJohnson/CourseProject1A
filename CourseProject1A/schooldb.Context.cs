//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CourseProject1A
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Choice_Christian_AcademyEntities : DbContext
    {
        public Choice_Christian_AcademyEntities()
            : base("name=Choice_Christian_AcademyEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Emergency_contact> Emergency_contact { get; set; }
        public virtual DbSet<House> Houses { get; set; }
        public virtual DbSet<Image> Images { get; set; }
        public virtual DbSet<Parent> Parents { get; set; }
        public virtual DbSet<Registration> Registrations { get; set; }
        public virtual DbSet<Staff> Staffs { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Subject_Table> Subject_Table { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public virtual DbSet<Test_Result> Test_Result { get; set; }
    
        [DbFunction("Choice_Christian_AcademyEntities", "All_Student")]
        public virtual IQueryable<All_Student_Result> All_Student()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<All_Student_Result>("[Choice_Christian_AcademyEntities].[All_Student]()");
        }
    
        [DbFunction("Choice_Christian_AcademyEntities", "All_Teacher")]
        public virtual IQueryable<All_Teacher_Result> All_Teacher()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<All_Teacher_Result>("[Choice_Christian_AcademyEntities].[All_Teacher]()");
        }
    
        [DbFunction("Choice_Christian_AcademyEntities", "birth_range")]
        public virtual IQueryable<birth_range_Result> birth_range(Nullable<System.DateTime> range1, Nullable<System.DateTime> range2)
        {
            var range1Parameter = range1.HasValue ?
                new ObjectParameter("range1", range1) :
                new ObjectParameter("range1", typeof(System.DateTime));
    
            var range2Parameter = range2.HasValue ?
                new ObjectParameter("range2", range2) :
                new ObjectParameter("range2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<birth_range_Result>("[Choice_Christian_AcademyEntities].[birth_range](@range1, @range2)", range1Parameter, range2Parameter);
        }
    
        [DbFunction("Choice_Christian_AcademyEntities", "Employment_Range")]
        public virtual IQueryable<Employment_Range_Result> Employment_Range(Nullable<System.DateTime> range1, Nullable<System.DateTime> range2)
        {
            var range1Parameter = range1.HasValue ?
                new ObjectParameter("range1", range1) :
                new ObjectParameter("range1", typeof(System.DateTime));
    
            var range2Parameter = range2.HasValue ?
                new ObjectParameter("range2", range2) :
                new ObjectParameter("range2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Employment_Range_Result>("[Choice_Christian_AcademyEntities].[Employment_Range](@range1, @range2)", range1Parameter, range2Parameter);
        }
    
        public virtual int insert_Student(string first_Name, string mid_Name, string last_Name, Nullable<System.DateTime> date_of_Birth, string gender, string address, string previous_School, string birth_Entry_Number, string grade, string @class)
        {
            var first_NameParameter = first_Name != null ?
                new ObjectParameter("First_Name", first_Name) :
                new ObjectParameter("First_Name", typeof(string));
    
            var mid_NameParameter = mid_Name != null ?
                new ObjectParameter("Mid_Name", mid_Name) :
                new ObjectParameter("Mid_Name", typeof(string));
    
            var last_NameParameter = last_Name != null ?
                new ObjectParameter("Last_Name", last_Name) :
                new ObjectParameter("Last_Name", typeof(string));
    
            var date_of_BirthParameter = date_of_Birth.HasValue ?
                new ObjectParameter("Date_of_Birth", date_of_Birth) :
                new ObjectParameter("Date_of_Birth", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var previous_SchoolParameter = previous_School != null ?
                new ObjectParameter("Previous_School", previous_School) :
                new ObjectParameter("Previous_School", typeof(string));
    
            var birth_Entry_NumberParameter = birth_Entry_Number != null ?
                new ObjectParameter("Birth_Entry_Number", birth_Entry_Number) :
                new ObjectParameter("Birth_Entry_Number", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var classParameter = @class != null ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_Student", first_NameParameter, mid_NameParameter, last_NameParameter, date_of_BirthParameter, genderParameter, addressParameter, previous_SchoolParameter, birth_Entry_NumberParameter, gradeParameter, classParameter);
        }
    }
}
